{"version":3,"sources":["components/Footer.tsx","components/Layout.tsx","utils/api.ts","utils/constants.ts","utils/tools.ts","utils/store.tsx","components/ColorPicker.tsx","components/NewColor.tsx","components/ColorPalette.tsx","components/NewPalette.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Footer","className","Layout","children","data-testid","postData","a","url","data","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","response","json","initialColor","name","hex","rgb","initialPalette","title","description","colors","uniqueId","Date","now","toString","AppContext","createContext","palettes","addColor","addPalette","changeColor","updateColor","deleteColor","handleDroppedColor","changeTitle","updateTitle","deletePalette","loading","AppContextProvider","useState","setPalettes","setColors","setLoading","useEffect","getInitialData","table","length","console","error","palette","id","prevPalettes","item","Provider","value","paletteId","find","p","colorId","color","updatedPalettes","map","prevColors","updates","key","aRgbHex","match","parseInt","hexToRGB","slice","updatedColor","c","then","Error","catch","err","filteredColors","filter","updatedColors","dragColor","dropColor","dragPaletteId","dropPaletteId","dragPaletteColors","dropPaletteColors","updated","dragIndex","findIndex","dropIndex","e","newTitle","currentTarget","colorIds","filteredPalettes","includes","useAppContext","useContext","ColorPicker","handleDrag","handleDrop","draggable","onDragOver","preventDefault","onDragStart","onDrop","type","onInput","target","onBlur","style","backgroundColor","cursor","htmlFor","onClick","NewColor","ColorPalette","onChange","NewPalette","App","dragId","setDragId","sort","b","getTime","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAceA,EAZU,WACvB,OACE,wBAAQC,UAAU,QAAlB,SACE,qBAAKA,UAAU,6BAAf,SACE,8BACE,sBAAMA,UAAU,wBAAhB,4FCKKC,EATU,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,OACE,sBAAKF,UAAU,+CAA+CG,cAAY,SAA1E,UACE,sBAAMH,UAAU,YAAhB,SAA6BE,IAC7B,cAAC,EAAD,Q,6CCPC,SAAeE,IAAtB,+B,4CAAO,4CAAAC,EAAA,6DAAwBC,EAAxB,+BAA8B,GAAIC,EAAlC,+BAAyC,GAAzC,SAEkBC,MAAMF,EAAK,CAChCG,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,QAAS,CACP,eAAgB,oBAGlBC,SAAU,SACVC,eAAgB,cAChBC,KAAMC,KAAKC,UAAUX,KAblB,cAECY,EAFD,yBAeEA,EAASC,QAfX,4C,sBCAA,IAAMC,EAAe,CAC1BC,KAAM,QACNC,IAAK,UACLC,IAAK,SAGMC,EAAiB,CAC5BC,MAAO,SACPC,YAAa,GACbC,OAAQ,ICIH,SAASC,IAId,OAAOC,KAAKC,MAAMC,WCIpB,IAAMC,EAAaC,wBAA+B,CAChDC,SAAU,GACVP,OAAQ,GACRQ,SAAU,aACVC,WAAY,aACZC,YAAa,aACbC,YAAa,aACbC,YAAa,aACbC,mBAAoB,aACpBC,YAAa,aACbC,YAAa,aACbC,cAAe,aACfC,SAAS,IAGLC,EAA+B,SAAC,GAAkB,IAAhB5C,EAAe,EAAfA,SAAe,EACrB6C,mBAAoB,IADC,mBAC9CZ,EAD8C,KACpCa,EADoC,OAEzBD,mBAAkB,IAFO,mBAE9CnB,EAF8C,KAEtCqB,EAFsC,OAGvBF,oBAAkB,GAHK,mBAG9CF,EAH8C,KAGrCK,EAHqC,KAKrDC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAc,uCAAG,8BAAA/C,EAAA,+EAEED,EAAS,cAAe,CAC3CiD,MAAO,WAHU,cAEbzB,EAFa,OAKnBqB,EAAUrB,GALS,SAMIxB,EAAS,cAAe,CAC7CiD,MAAO,aAPU,QAMblB,EANa,QASNmB,OAAS,EACpBN,EAAYb,GAEZE,IAZiB,kDAenBkB,QAAQC,MAAR,MAfmB,yBAiBnBN,GAAW,GAjBQ,6EAAH,qDAwEdb,EAAa,WAEjB,IAAMoB,EAAO,2BACRhC,GADQ,IAEXiC,GAAI7B,MAGNmB,GAAY,SAACW,GACX,MAAM,GAAN,mBACKA,GADL,CAEEF,OAIJrD,EAAS,cAAe,CACtBiD,MAAO,WACPO,KAAMH,KAiNV,OACE,cAACxB,EAAW4B,SAAZ,CACEC,MAAO,CACL3B,WACAP,SACAQ,SAzRW,SAAC2B,GAChB,IAAMN,EAAUtB,EAAS6B,MAAK,SAAAC,GAC5B,OAAOA,EAAEP,KAAOK,KAEZG,EAAUrC,IACVsC,EAAK,2BACN9C,GADM,IAETqC,GAAIQ,EACJT,QAASM,IAGLK,EAAkBjC,EAASkC,KAAI,SAAAJ,GACnC,OAAIA,EAAEP,KAAOK,EACJ,2BACFE,GADL,IAEErC,OAAO,GAAD,mBACDqC,EAAErC,QADD,CAEJsC,MAICD,KAGThB,GAAU,SAACqB,GACT,MAAM,GAAN,mBACKA,GADL,CAEEH,OAGJnB,EAAYoB,GAEZhE,EAAS,cAAe,CACtBiD,MAAO,SACPO,KAAMO,IAER/D,EAAS,iBAAkB,CACzBiD,MAAO,WACPK,GAAE,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAASC,GACba,QAAS,CACP,CACEC,IAAK,SACLV,MAAM,GAAD,oBACO,OAAPL,QAAO,IAAPA,OAAA,EAAAA,EAAS7B,SAAU,IADnB,CAEHsC,SA8OJ7B,aACAC,YA/Mc,SAAC6B,EAAc5C,GAEjC,IAAMC,EDhJH,SAAmBD,GACxB,IAAIkD,EAAUlD,EAAImD,MAAM,WACxB,QAAID,GACS,CACTE,SAASF,EAAQ,GAAI,IACrBE,SAASF,EAAQ,GAAI,IACrBE,SAASF,EAAQ,GAAI,KC0ISG,CAASrD,EAAIsD,MAAM,IAC7CC,EAAmB,2BACpBX,GADoB,IAEvB7C,KAAM,MACNC,MACAC,IAAKA,EAAMA,EAAIQ,WAAa,KAE9BiB,GAAU,SAAAqB,GACR,OAAOA,EAAWD,KAAI,SAAAU,GAAC,OAAIA,EAAErB,KAAOS,EAAMT,GAAKoB,EAAeC,SAsM5DxC,YA7Lc,SAAC4B,GACnB,IAAIW,EAAeX,EACnB/D,EAAS,cAAe,CACtBmB,IAAK4C,EAAM5C,IAAIsD,MAAM,KAEpBG,MAAK,SAACzE,GACL,UAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAMqB,OAQR,OAPAkD,EAAY,2BACPX,GADO,IAEV7C,KAAMf,EAAKqB,OAAO,GAAGN,OAEvB2B,GAAU,SAAAqB,GACR,OAAOA,EAAWD,KAAI,SAAAU,GAAC,OAAIA,EAAErB,KAAOS,EAAMT,GAAKoB,EAAeC,QAEzDD,EAEP,MAAM,IAAIG,SAGbD,MAAK,SAAAF,GACJ,OAAO1E,EAAS,iBAAkB,CAChCiD,MAAO,SACPK,GAAE,OAAES,QAAF,IAAEA,OAAF,EAAEA,EAAOT,GACXa,QAAS,CACP,CACEC,IAAK,OACLV,MAAOgB,EAAaxD,MAEtB,CACEkD,IAAK,MACLV,MAAOgB,EAAavD,KAEtB,CACEiD,IAAK,MACLV,MAAOgB,EAAatD,WAK3B0D,OAAM,SAAAC,GAEL,OADA5B,QAAQC,MAAM2B,GACPA,MAqJP3C,YA3Ic,SAAC2B,EAAcJ,GACjC,IAAMN,EAAUtB,EAAS6B,MAAK,SAAAC,GAAC,OAAIA,EAAEP,KAAOK,KACtCqB,EAAc,OAAG3B,QAAH,IAAGA,OAAH,EAAGA,EAAS7B,OAAOyD,QAAO,SAAA3B,GAAE,OAAIA,IAAOS,EAAMT,MAC3DU,EAAkBjC,EAASkC,KAAI,SAAAJ,GACnC,OAAIA,EAAEP,KAAOK,GAAaqB,EACjB,2BACFnB,GADL,IAEErC,OAAQwD,IAGLnB,KAEHqB,EAAgB1D,EAAOyD,QAAO,SAAAN,GAAC,OAAIA,EAAErB,KAAOS,EAAMT,MAExDT,EAAUqC,GACVtC,EAAYoB,GAEZhE,EAAS,iBAAkB,CACzBiD,MAAO,SACPK,GAAIS,EAAMT,KAEZtD,EAAS,iBAAkB,CACzBiD,MAAO,WACPK,GAAE,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAASC,GACba,QAAS,CACP,CACEC,IAAK,SACLV,MAAOwB,OAiHT7C,mBA3GqB,SAAC8C,EAAkBC,GAC5C,GAAID,GAAaC,EAAW,CAC1B,IAAIC,EACFC,EACAC,EACAC,EAEIxB,EAAkBjC,EAASkC,KAAI,SAAAJ,GACnC,IAAM4B,EAAO,eAAO5B,GACd6B,EAAoB7B,EAAErC,OAAOmE,WAAU,SAAArC,GAAE,OAAIA,IAAO6B,EAAU7B,MAC9DsC,EAAoB/B,EAAErC,OAAOmE,WAAU,SAAArC,GAAE,OAAIA,IAAO8B,EAAU9B,MAWpE,OAVIoC,GAAa,IACfD,EAAQjE,OAAOkE,GAAaN,EAAU9B,GACtC+B,EAAgBxB,EAAEP,GAClBiC,EAAoBE,EAAQjE,QAE1BoE,GAAa,IACfH,EAAQjE,OAAOoE,GAAaT,EAAU7B,GACtCgC,EAAgBzB,EAAEP,GAClBkC,EAAoBC,EAAQjE,QAEvBiE,KAGT7C,EAAYoB,GAEZhE,EAAS,iBAAkB,CACzBiD,MAAO,WACPK,GAAI+B,EACJlB,QAAS,CACP,CACEC,IAAK,SACLV,MAAO6B,MAITF,IAAkBC,GACpBtF,EAAS,iBAAkB,CACzBiD,MAAO,WACPK,GAAIgC,EACJnB,QAAS,CACP,CACEC,IAAK,SACLV,MAAO8B,QAiEblD,YAzDc,SAACuD,EAAwClC,GAC3D,IAAMmC,EAAWD,EAAEE,cAAcrC,MAC3BM,EAAkBjC,EAASkC,KAAI,SAAAJ,GACnC,OAAIA,EAAEP,KAAOK,EACJ,2BACFE,GADL,IAEEvC,MAAOwE,IAGJjC,KAETjB,EAAYoB,IA+CRzB,YA5Cc,SAACc,GACnBrD,EAAS,iBAAkB,CACzBiD,MAAO,WACPK,GAAID,EAAQC,GACZa,QAAS,CACP,CACEC,IAAK,QACLV,MAAOL,EAAQ/B,WAsCjBkB,cAhCgB,SAACmB,EAAmBqC,GACxC,IAAMC,EAAmBlE,EAASkD,QAAO,SAAApB,GAAC,OAAIA,EAAEP,KAAOK,KACjDqB,EAAiBxD,EAAOyD,QAAO,SAAAN,GAAC,OAAKqB,EAASE,SAASvB,EAAErB,OAE/DT,EAAUmC,GACVpC,EAAYqD,GALmD,oBAO9CD,GAP8C,IAO/D,2BAA2B,CACzBhG,EAAS,iBAAkB,CACzBiD,MAAO,SACPK,GAHuB,WAPoC,8BAa/DtD,EAAS,iBAAkB,CACzBiD,MAAO,WACPK,GAAIK,KAkBFlB,WAbJ,SAgBG3C,KAKDqG,EAAgB,kBAAMC,qBAAWvE,ICzRxBwE,EAxEsB,SAAC,GAK/B,IAJL1C,EAII,EAJJA,UACAI,EAGI,EAHJA,MACAuC,EAEI,EAFJA,WACAC,EACI,EADJA,WACI,EAKAJ,IAHFjE,EAFE,EAEFA,YACAC,EAHE,EAGFA,YACAC,EAJE,EAIFA,YAJE,EAM0BO,oBAAS,GANnC,6BAqBJ,OACE,sBACE/C,UAAU,mFACV0D,GAAIS,EAAMT,GAAG1B,WACb4E,WAAW,EACXC,WAAY,SAACZ,GAAD,OAAOA,EAAEa,kBACrBC,YAAaL,EACbM,OAAQL,EANV,UAQE,uBACE3G,UAAU,oCACViH,KAAK,QACLvD,GAAE,gBAAWS,EAAMT,IACnBpC,KAAI,gBAAW6C,EAAMT,IACrBI,MAAK,OAAEK,QAAF,IAAEA,OAAF,EAAEA,EAAO5C,IACd2F,QA5Be,SAACjB,GACpB3D,EAAY6B,EAAO8B,EAAEkB,OAAOrD,QA4BxBsD,OAzBa,SAACnB,GAClB1D,EAAY4B,MA0BV,uBACEnE,UAAU,8CACVqH,MAAO,CACLC,gBAAe,OAAEnD,QAAF,IAAEA,OAAF,EAAEA,EAAO5C,IACxBgG,OAAQ,QAEVC,QAAO,gBAAWrD,EAAMT,MAE1B,qBAAK1D,UAAU,0CAAf,SACE,wBAAQA,UAAU,iCAAiCyH,QAhCpC,SAACxB,GACpBA,EAAEa,iBACFtE,EAAY2B,EAAOJ,IA8Bf,sBAEF,sBAAK/D,UAAU,kDAAf,WACQ,OAALmE,QAAK,IAALA,OAAA,EAAAA,EAAO7C,OACN,qBAAKtB,UAAU,yCAAf,SAAwD,sBAAMA,UAAU,+BAAhB,SAAgDmE,EAAM7C,SAEhH,sBAAKtB,UAAU,QAAf,WACQ,OAALmE,QAAK,IAALA,OAAA,EAAAA,EAAO5C,MACN,8BAAK,sBAAMvB,UAAU,gBAAhB,SAAiCmE,EAAM5C,SAExC,OAAL4C,QAAK,IAALA,OAAA,EAAAA,EAAO3C,MACN,8BAAK,uBAAMxB,UAAU,gBAAhB,iBAAqCmE,EAAM3C,IAA3C,mBCxDFkG,EAZmB,SAAC,GAAiB,IAAhB3D,EAAe,EAAfA,UAEhC3B,EACEmE,IADFnE,SAGF,OACE,qBAAKpC,UAAU,kBAAf,SACE,wBAAQA,UAAU,qHAAqHyH,QAAS,kBAAMrF,EAAS2B,IAA/J,kBCgDS4D,EAlDuB,SAAC,GAAyC,IAAD,EAAtClE,EAAsC,EAAtCA,QAASiD,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,WAAiB,EAMzEJ,IAJF3E,EAF2E,EAE3EA,OACAc,EAH2E,EAG3EA,YACAC,EAJ2E,EAI3EA,YACAC,EAL2E,EAK3EA,cAGF,OACE,sBACE5C,UAAU,aADZ,UAGE,sBAAKA,UAAU,oCAAf,UACE,uBACEA,UAAU,sIACV8D,MAAOL,EAAQ/B,MACfuF,KAAK,OACLW,SAAU,SAAA3B,GAAC,OAAIvD,EAAYuD,EAAGxC,EAAQC,KACtC0D,OAAQ,kBAAMzE,EAAYc,MAE1B,wBACEzD,UAAU,kGACVyH,QAAS,kBAAM7E,EAAca,EAAQC,GAAID,EAAQ7B,SAFnD,uBAKJ,sBAAK5B,UAAU,iBAAf,UACE,4BAAIyD,EAAQ9B,cADd,OAGI8B,QAHJ,IAGIA,GAHJ,UAGIA,EAAS7B,cAHb,aAGI,EAAiByC,KAAI,SAAAH,GACnB,IAAMC,EAAQvC,EAAOoC,MAAK,SAAAe,GAAC,OAAIA,EAAErB,KAAOQ,KACxC,GAAIC,EACF,OACE,cAAC,EAAD,CAEEJ,UAAWN,EAAQC,GACnBS,MAAOA,EACPuC,WAAYA,EACZC,WAAYA,GALd,UACUxC,EAAMT,QAWxB,cAAC,EAAD,CAAUK,UAAWN,EAAQC,YCzCtBmE,EAZc,WAAO,IAEhCxF,EACEkE,IADFlE,WAGF,OACE,qBAAKrC,UAAU,OAAf,SACE,wBAAQA,UAAU,gEAAgEyH,QAASpF,EAA3F,4BCuDSyF,EA1DH,WAAO,IAAD,EAMZvB,IAJFpE,EAFc,EAEdA,SACAP,EAHc,EAGdA,OACAa,EAJc,EAIdA,mBACAI,EALc,EAKdA,QALc,EAQYE,mBAAwB,MARpC,mBAQTgF,EARS,KAQDC,EARC,KAUVtB,EAAa,SAACT,GAClB+B,EAAU/B,EAAEE,cAAczC,KAGtBiD,EAAa,SAACV,GAClB,IAAMV,EAA+B3D,EAAOoC,MAAK,SAAAe,GAAC,OAAIA,EAAErB,KAAOqE,KACzDvC,EAA+B5D,EAAOoC,MAAK,SAAAe,GAAC,OAAIA,EAAErB,KAAOuC,EAAEE,cAAczC,MAC3E6B,GAAaC,GACf/C,EAAmB8C,EAAWC,IAIlC,OACE,qBAAKxF,UAAU,MAAf,SACE,cAAC,EAAD,UACE,sBAAKA,UAAU,mCAAf,UACE,oBAAIA,UAAU,2BAAd,4BACC6C,EACC,mDAEA,gCAEIV,EAAS8F,MAAK,SAAC5H,EAAY6H,GACzB,OAAI7H,GAAK6H,GAAK7H,EAAEqD,IAAMwE,EAAExE,GACf,IAAI5B,KAAK6C,SAAStE,EAAEqD,KAAKyE,UAAY,IAAIrG,KAAK6C,SAASuD,EAAExE,KAAKyE,UAEhE,KAEN9D,KAAI,SAACJ,EAAYmE,GAChB,OACE,cAAC,EAAD,CAEE3E,QAASQ,EACTyC,WAAYA,EACZC,WAAYA,GAHP1C,EAAEP,OAQjB,cAAC,EAAD,eC1CC2E,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBvD,MAAK,YAAkD,IAA/CwD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a74910c9.chunk.js","sourcesContent":["import React from 'react'\n\nconst Footer: React.FC = () => {\n  return (\n    <footer className='pb-12'>\n      <div className='max-w-[900px] mx-auto px-8'>\n        <div>\n          <span className='text-xs text-gray-400'>Rudimentary clone of Fronity Color Palette component by Michael Ray-Von</span>\n        </div>\n      </div>\n    </footer>\n  )\n};\n\nexport default Footer\n","import React from 'react'\nimport Footer from './Footer'\n\nconst Layout: React.FC = ({ children }) => {\n  return (\n    <div className='overflow-x-hidden flex flex-col min-h-screen' data-testid='layout'>\n      <main className='flex-grow'>{children}</main>\n      <Footer />\n    </div>\n  )\n}\n\nexport default Layout\n","export async function postData(url = '', data = {}) {\n  // Default options are marked with *\n  const response = await fetch(url, {\n    method: 'POST', // *GET, POST, PUT, DELETE, etc.\n    mode: 'cors', // no-cors, *cors, same-origin\n    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: 'same-origin', // include, *same-origin, omit\n    headers: {\n      'Content-Type': 'application/json'\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    redirect: 'follow', // manual, *follow, error\n    referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n  });\n  return response.json(); // parses JSON response into native JavaScript objects\n}\n","export const initialColor = {\n  name: 'Black',\n  hex: '#000000',\n  rgb: '0,0,0'\n}\n\nexport const initialPalette = {\n  title: 'Colors',\n  description: '',\n  colors: []\n}","export function hexToRGB (hex: string): number[] | boolean {\n  var aRgbHex = hex.match(/.{1,2}/g);\n  if (aRgbHex) {\n    var aRgb = [\n      parseInt(aRgbHex[0], 16),\n      parseInt(aRgbHex[1], 16),\n      parseInt(aRgbHex[2], 16)\n    ];\n    return aRgb\n  }\n  return false\n}\n\nexport function uniqueId(): string {\n  /*const min = 1000000000000000000;\n  const max = 9999999999999999999;\n  return Math.floor(Math.random() * (max - min) + min).toString();*/\n  return Date.now().toString()\n}","import { createContext, useContext, useEffect, useState } from 'react'\nimport { postData } from './api'\nimport { initialColor, initialPalette } from './constants'\nimport { hexToRGB, uniqueId } from './tools'\nimport { Color, Palette } from './types'\n\ninterface AppContextValue {\n  palettes: Palette[] | []\n  colors: Color[] | []\n  addColor(paletteId: string): void\n  addPalette(): void\n  changeColor(color: Color, hex: string): void\n  updateColor(color: Color): void\n  deleteColor(deletedColor: Color, paletteId: string): void\n  handleDroppedColor(dragColor: Color, dropColor: Color): void | null\n  changeTitle(e: React.ChangeEvent<HTMLInputElement>, paletteId: string): void\n  updateTitle(palette: Palette): void\n  deletePalette(paletteId: string, colorIds: string[]): void\n  loading: boolean\n}\n\nconst AppContext = createContext<AppContextValue>({\n  palettes: [],\n  colors: [],\n  addColor: () => {},\n  addPalette: () => {},\n  changeColor: () => {},\n  updateColor: () => {},\n  deleteColor: () => {},\n  handleDroppedColor: () => {},\n  changeTitle: () => {},\n  updateTitle: () => {}, \n  deletePalette: () => {},\n  loading: true\n})\n\nconst AppContextProvider: React.FC = ({ children }) => {\n  const [palettes, setPalettes] = useState<Palette[]>([])\n  const [colors, setColors] = useState<Color[]>([])\n  const [loading, setLoading] = useState<boolean>(true)\n\n  useEffect(() => {\n    getInitialData()\n  }, [])\n\n  const getInitialData = async () => {\n    try {\n      const colors = await postData('api/getData', {\n        table: 'colors'\n      })\n      setColors(colors)\n      const palettes = await postData('api/getData', {\n        table: 'palettes'\n      })\n      if (palettes.length > 0) {\n        setPalettes(palettes)\n      } else {\n        addPalette()\n      }\n    } catch (err) {\n      console.error(err)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const addColor = (paletteId: string) => {\n    const palette = palettes.find(p => {\n      return p.id === paletteId\n    })\n    const colorId = uniqueId()\n    const color = {\n      ...initialColor,\n      id: colorId,\n      palette: paletteId\n    }\n    \n    const updatedPalettes = palettes.map(p => {\n      if (p.id === paletteId) {\n        return {\n          ...p, \n          colors: [\n            ...p.colors,\n            colorId\n          ]\n        }\n      }\n      return p\n    })\n\n    setColors((prevColors) => {\n      return [\n        ...prevColors,\n        color\n      ]\n    })\n    setPalettes(updatedPalettes)\n\n    postData('api/addItem', {\n      table: 'colors',\n      item: color\n    })\n    postData('api/updateItem', {\n      table: 'palettes',\n      id: palette?.id,\n      updates: [\n        {\n          key: 'colors',\n          value: [\n            ...palette?.colors || [],\n            colorId\n          ]\n        }\n      ]\n    })\n  }\n\n  const addPalette = () => {\n    // Assemble new palette from inital props and unique ID\n    const palette = {\n      ...initialPalette,\n      id: uniqueId()\n    }\n    // Concat new palette to palettes state\n    setPalettes((prevPalettes) => {\n      return [\n        ...prevPalettes,\n        palette\n      ]\n    })\n    // Post new palette to database\n    postData('api/addItem', {\n      table: 'palettes',\n      item: palette\n    })\n  }\n\n  /**\n   * Update color hex & rgb in app state\n   * @param color Color to update\n   * @param hex New hexidecimal value of color\n   */\n  const changeColor = (color: Color, hex: string) => {\n    // update color with RGB value\n    const rgb: number[] | boolean = hexToRGB(hex.slice(1))\n    const updatedColor: Color = {\n      ...color,\n      name: '...',\n      hex,\n      rgb: rgb ? rgb.toString() : ''\n    }    \n    setColors(prevColors => {\n      return prevColors.map(c => c.id === color.id ? updatedColor : c)\n    })\n  }\n\n  /**\n   * Get color name and update color in \n   * database with name, hex, and rgb\n   * @param color Color to update\n   */\n  const updateColor = (color: Color) => {\n    let updatedColor = color\n    postData('api/getName', {\n      hex: color.hex.slice(1)\n    })\n      .then((data) => {\n        if (data?.colors) {\n          updatedColor = {\n            ...color, \n            name: data.colors[0].name\n          }\n          setColors(prevColors => {\n            return prevColors.map(c => c.id === color.id ? updatedColor : c)\n          })\n          return updatedColor\n        } else {\n          throw new Error()\n        }\n      })\n      .then(updatedColor => {\n        return postData('api/updateItem', { \n          table: 'colors',\n          id: color?.id,\n          updates: [\n            {\n              key: 'name',\n              value: updatedColor.name\n            },\n            {\n              key: 'hex',\n              value: updatedColor.hex\n            },\n            {\n              key: 'rgb',\n              value: updatedColor.rgb\n            }\n          ]\n        })\n      })\n      .catch(err => {\n        console.error(err)\n        return err\n      })\n    \n  }\n\n  /**\n   * Delete color from colors and corresponding palette\n   * @param color Color to delete\n   * @param paletteId ID of palette the color is on\n   */\n  const deleteColor = (color: Color, paletteId: string) => {\n    const palette = palettes.find(p => p.id === paletteId)\n    const filteredColors = palette?.colors.filter(id => id !== color.id)\n    const updatedPalettes = palettes.map(p => {\n      if (p.id === paletteId && filteredColors) {\n        return {\n          ...p,\n          colors: filteredColors\n        }\n      }\n      return p\n    })\n    const updatedColors = colors.filter(c => c.id !== color.id)\n\n    setColors(updatedColors)\n    setPalettes(updatedPalettes)\n    \n    postData('api/deleteItem', { \n      table: 'colors',\n      id: color.id\n    })\n    postData('api/updateItem', {\n      table: 'palettes',\n      id: palette?.id,\n      updates: [\n        {\n          key: 'colors',\n          value: updatedColors\n        }\n      ]\n    })\n  }\n\n  const handleDroppedColor = (dragColor: Color, dropColor: Color) => {\n    if (dragColor && dropColor) {\n      let dragPaletteId, \n        dropPaletteId,\n        dragPaletteColors,\n        dropPaletteColors\n\n      const updatedPalettes = palettes.map(p => {\n        const updated = {...p}\n        const dragIndex: number = p.colors.findIndex(id => id === dragColor.id)\n        const dropIndex: number = p.colors.findIndex(id => id === dropColor.id)\n        if (dragIndex > -1) {\n          updated.colors[dragIndex] = dropColor.id\n          dragPaletteId = p.id \n          dragPaletteColors = updated.colors\n        }\n        if (dropIndex > -1) {\n          updated.colors[dropIndex] = dragColor.id\n          dropPaletteId = p.id \n          dropPaletteColors = updated.colors\n        }\n        return updated\n      })\n\n      setPalettes(updatedPalettes)\n\n      postData('api/updateItem', {\n        table: 'palettes',\n        id: dragPaletteId,\n        updates: [\n          {\n            key: 'colors',\n            value: dragPaletteColors\n          }\n        ]\n      })\n      if (dragPaletteId !== dropPaletteId) {\n        postData('api/updateItem', {\n          table: 'palettes',\n          id: dropPaletteId,\n          updates: [\n            {\n              key: 'colors',\n              value: dropPaletteColors\n            }\n          ]\n        })\n      }\n    }\n  }\n\n  const changeTitle = (e: React.ChangeEvent<HTMLInputElement>, paletteId: string) => {\n    const newTitle = e.currentTarget.value\n    const updatedPalettes = palettes.map(p => {\n      if (p.id === paletteId) {\n        return {\n          ...p,\n          title: newTitle\n        }\n      }\n      return p\n    })\n    setPalettes(updatedPalettes)\n  }\n\n  const updateTitle = (palette: Palette) => {\n    postData('api/updateItem', { \n      table: 'palettes',\n      id: palette.id,\n      updates: [\n        {\n          key: 'title',\n          value: palette.title\n        }\n      ]\n    })\n  }\n\n  const deletePalette = (paletteId: string, colorIds: string[]) => {\n    const filteredPalettes = palettes.filter(p => p.id !== paletteId)\n    const filteredColors = colors.filter(c => !colorIds.includes(c.id));\n    \n    setColors(filteredColors)\n    setPalettes(filteredPalettes)\n    \n    for (const id of colorIds) {\n      postData('api/deleteItem', { \n        table: 'colors',\n        id\n      })\n    }\n    postData('api/deleteItem', { \n      table: 'palettes',\n      id: paletteId\n    })\n  }\n \n  return (\n    <AppContext.Provider\n      value={{\n        palettes,\n        colors,\n        addColor,\n        addPalette,\n        changeColor,\n        updateColor,\n        deleteColor,\n        handleDroppedColor,\n        changeTitle,\n        updateTitle,\n        deletePalette,\n        loading\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  )\n}\n\nconst useAppContext = () => useContext(AppContext)\n\nexport { AppContext as default, AppContextProvider, useAppContext }","import React, { useState } from 'react'\nimport { useAppContext } from '../utils/store'\nimport type { Color } from '../utils/types'\n\ninterface Props {\n  paletteId: string\n  color: Color\n  handleDrag(e: React.DragEvent): void\n  handleDrop(e: React.DragEvent): void\n}\n\nconst ColorPicker: React.FC<Props> = ({ \n  paletteId,\n  color, \n  handleDrag,\n  handleDrop\n}) => {\n  const { \n    changeColor,\n    updateColor,\n    deleteColor \n  } = useAppContext()\n  const [hovered, setHovered] = useState(false)\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    changeColor(color, e.target.value)\n  }\n\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    updateColor(color)\n  }\n\n  const handleDelete = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.preventDefault()\n    deleteColor(color, paletteId)\n  }\n\n  return (\n    <div \n      className='flex flex-col text-center items-center py-4 w-32 relative h-[190px] hover-parent'\n      id={color.id.toString()}\n      draggable={true}\n      onDragOver={(e) => e.preventDefault()}\n      onDragStart={handleDrag}\n      onDrop={handleDrop}\n      >\n      <input \n        className='w-0 h-0 opacity-0 absolute left-0' \n        type='color' \n        id={`color_${color.id}`}\n        name={`color_${color.id}`}\n        value={color?.hex} \n        onInput={handleChange} \n        onBlur={handleBlur}\n        />\n      <label \n        className='block w-24 h-24 rounded-full shadow-xl mb-4' \n        style={{\n          backgroundColor: color?.hex,\n          cursor: 'move'\n        }} \n        htmlFor={`color_${color.id}`} \n        />\n      <div className='hover-child absolute top-0 right-0 flex'>\n        <button className='text-gray-400 hover:text-black' onClick={handleDelete}>✕</button>\n      </div>\n      <div className='text-xs flex flex-col justify-between flex-grow'>\n        {color?.name && \n          <div className='flex-grow flex flex-col justify-center'><span className='mb-2 font-bold text-gray-800'>{color.name}</span></div>\n        }\n        <div className='block'>\n          {color?.hex && \n            <div><span className='text-gray-500'>{color.hex}</span></div>\n          }\n          {color?.rgb && \n            <div><span className='text-gray-500'>rgb({color.rgb})</span></div>\n          }\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ColorPicker","import React from 'react'\nimport { useAppContext } from \"../utils/store\"\n\ninterface Props {\n  paletteId: string\n}\n\nconst NewColor: React.FC<Props> = ({paletteId}) => {\n  const { \n    addColor \n  } = useAppContext()\n\n  return (\n    <div className='pb-12 h-[190px]'>\n      <button className='m-4 w-24 h-24 rounded-full bg-gray-200 text-3xl font-bold text-gray-500 flex justify-center items-center shadow-xl' onClick={() => addColor(paletteId)}>+</button>\n    </div>\n  )\n}\n\nexport default NewColor","import React, { useState } from \"react\";\nimport { useAppContext } from \"../utils/store\";\nimport { Color, Palette } from \"../utils/types\"\nimport ColorPicker from \"./ColorPicker\";\nimport NewColor from \"./NewColor\";\n\ninterface Props {\n  palette: Palette\n  handleDrag(e: React.DragEvent): void\n  handleDrop(e: React.DragEvent): void\n}\n\nconst ColorPalette: React.FC<Props> = ({ palette, handleDrag, handleDrop }) => {\n  const { \n    colors, \n    changeTitle,\n    updateTitle,\n    deletePalette\n  } = useAppContext()\n  \n  return (\n    <div \n      className='mb-8 group'\n      >\n      <div className='flex justify-between items-center'>\n        <input \n          className='border-0 border-b border-transparent text-xl font-bold px-0 focus:ring-transparent hover:border-gray-300 focus:border-gray-500 pb-1' \n          value={palette.title} \n          type='text' \n          onChange={e => changeTitle(e, palette.id)}\n          onBlur={() => updateTitle(palette)}\n          />\n          <button \n            className='opacity-0 group-hover:opacity-100 py-1 px-2 rounded-lg bg-gray-400 hover:bg-gray-600 text-white' \n            onClick={() => deletePalette(palette.id, palette.colors)}\n            >Remove</button>\n      </div>\n      <div className='flex flex-wrap'>\n        <p>{palette.description}</p>\n        {\n          palette?.colors?.map(colorId => {\n            const color = colors.find(c => c.id === colorId)\n            if (color) {\n              return (\n                <ColorPicker \n                  key={`${color.id}`}\n                  paletteId={palette.id}\n                  color={color} \n                  handleDrag={handleDrag}\n                  handleDrop={handleDrop}\n                  />\n              )\n            }\n            return\n          })\n        }\n        <NewColor paletteId={palette.id} />\n      </div>\n    </div>\n  )\n}\n\nexport default ColorPalette\n","import React from 'react'\nimport { useAppContext } from '../utils/store'\n\nconst NewPalette: React.FC = () => {\n  const { \n    addPalette\n  } = useAppContext()\n\n  return (\n    <div className='pt-8'>\n      <button className='py-1 px-2 rounded-lg bg-gray-400 hover:bg-gray-600 text-white' onClick={addPalette}>Add Palette</button>\n    </div>\n  )\n}\n\nexport default NewPalette","import React, { useState } from 'react';\nimport Layout from './components/Layout';\nimport { useAppContext } from './utils/store';\nimport { Color, Palette } from './utils/types'\nimport ColorPalette from './components/ColorPalette';\nimport NewPalette from './components/NewPalette';\n\nconst App = () => {\n  const { \n    palettes,\n    colors,\n    handleDroppedColor,\n    loading\n  } = useAppContext()\n\n  const [dragId, setDragId] = useState<null | string>(null)\n  \n  const handleDrag = (e: React.DragEvent) => {\n    setDragId(e.currentTarget.id)\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    const dragColor: Color | undefined = colors.find(c => c.id === dragId)\n    const dropColor: Color | undefined = colors.find(c => c.id === e.currentTarget.id)\n    if (dragColor && dropColor) {\n      handleDroppedColor(dragColor, dropColor)\n    }\n  }\n\n  return (\n    <div className='App'>\n      <Layout>\n        <div className='max-w-[900px] mx-auto py-20 px-8'>\n          <h1 className='text-3xl font-bold mb-12'>Color Palettes</h1>\n          {loading ? (\n            <div>Mixing colors...</div>\n          ) : (\n            <div>\n              {\n                palettes.sort((a: Palette, b: Palette) => {\n                  if (a && b && a.id && b.id) {\n                    return new Date(parseInt(a.id)).getTime() - new Date(parseInt(b.id)).getTime()\n                  }\n                  return 0\n                })\n                  .map((p: Palette, i) => {\n                    return (\n                      <ColorPalette \n                        key={p.id} \n                        palette={p} \n                        handleDrag={handleDrag}\n                        handleDrop={handleDrop}\n                      />\n                    )\n                  })\n              }\n              <NewPalette />\n            </div>\n          )}\n        </div>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { AppContextProvider } from './utils/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppContextProvider>\n      <App />\n    </AppContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}